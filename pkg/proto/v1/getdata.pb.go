// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.24.0-devel
// 	protoc        v3.12.0
// source: getdata.proto

package v1

import (
	context "context"
	proto "github.com/golang/protobuf/proto"
	empty "github.com/golang/protobuf/ptypes/empty"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

// This is a compile-time assertion that a sufficiently up-to-date version
// of the legacy proto package is being used.
const _ = proto.ProtoPackageIsVersion4

type InvsFundRegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SaCode     string `protobuf:"bytes,1,opt,name=sa_code,json=saCode,proto3" json:"sa_code,omitempty"`
	SID        string `protobuf:"bytes,2,opt,name=SID,proto3" json:"SID,omitempty"`
	InvstrName string `protobuf:"bytes,3,opt,name=InvstrName,proto3" json:"InvstrName,omitempty"`
	ClientCode string `protobuf:"bytes,4,opt,name=ClientCode,proto3" json:"ClientCode,omitempty"`
}

func (x *InvsFundRegData) Reset() {
	*x = InvsFundRegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getdata_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *InvsFundRegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*InvsFundRegData) ProtoMessage() {}

func (x *InvsFundRegData) ProtoReflect() protoreflect.Message {
	mi := &file_getdata_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use InvsFundRegData.ProtoReflect.Descriptor instead.
func (*InvsFundRegData) Descriptor() ([]byte, []int) {
	return file_getdata_proto_rawDescGZIP(), []int{0}
}

func (x *InvsFundRegData) GetSaCode() string {
	if x != nil {
		return x.SaCode
	}
	return ""
}

func (x *InvsFundRegData) GetSID() string {
	if x != nil {
		return x.SID
	}
	return ""
}

func (x *InvsFundRegData) GetInvstrName() string {
	if x != nil {
		return x.InvstrName
	}
	return ""
}

func (x *InvsFundRegData) GetClientCode() string {
	if x != nil {
		return x.ClientCode
	}
	return ""
}

type RedmPayRegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvsFundAC  string `protobuf:"bytes,1,opt,name=InvsFundAC,proto3" json:"InvsFundAC,omitempty"`
	BankBicCd   string `protobuf:"bytes,2,opt,name=BankBicCd,proto3" json:"BankBicCd,omitempty"`
	BankBiMemCd string `protobuf:"bytes,3,opt,name=BankBiMemCd,proto3" json:"BankBiMemCd,omitempty"`
	BankName    string `protobuf:"bytes,4,opt,name=BankName,proto3" json:"BankName,omitempty"`
	BankCntry   string `protobuf:"bytes,5,opt,name=BankCntry,proto3" json:"BankCntry,omitempty"`
	BankBranch  string `protobuf:"bytes,6,opt,name=BankBranch,proto3" json:"BankBranch,omitempty"`
	AcCcy       string `protobuf:"bytes,7,opt,name=AcCcy,proto3" json:"AcCcy,omitempty"`
	BankAcNo    string `protobuf:"bytes,8,opt,name=BankAcNo,proto3" json:"BankAcNo,omitempty"`
	BankAcName  string `protobuf:"bytes,9,opt,name=BankAcName,proto3" json:"BankAcName,omitempty"`
}

func (x *RedmPayRegData) Reset() {
	*x = RedmPayRegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getdata_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RedmPayRegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RedmPayRegData) ProtoMessage() {}

func (x *RedmPayRegData) ProtoReflect() protoreflect.Message {
	mi := &file_getdata_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RedmPayRegData.ProtoReflect.Descriptor instead.
func (*RedmPayRegData) Descriptor() ([]byte, []int) {
	return file_getdata_proto_rawDescGZIP(), []int{1}
}

func (x *RedmPayRegData) GetInvsFundAC() string {
	if x != nil {
		return x.InvsFundAC
	}
	return ""
}

func (x *RedmPayRegData) GetBankBicCd() string {
	if x != nil {
		return x.BankBicCd
	}
	return ""
}

func (x *RedmPayRegData) GetBankBiMemCd() string {
	if x != nil {
		return x.BankBiMemCd
	}
	return ""
}

func (x *RedmPayRegData) GetBankName() string {
	if x != nil {
		return x.BankName
	}
	return ""
}

func (x *RedmPayRegData) GetBankCntry() string {
	if x != nil {
		return x.BankCntry
	}
	return ""
}

func (x *RedmPayRegData) GetBankBranch() string {
	if x != nil {
		return x.BankBranch
	}
	return ""
}

func (x *RedmPayRegData) GetAcCcy() string {
	if x != nil {
		return x.AcCcy
	}
	return ""
}

func (x *RedmPayRegData) GetBankAcNo() string {
	if x != nil {
		return x.BankAcNo
	}
	return ""
}

func (x *RedmPayRegData) GetBankAcName() string {
	if x != nil {
		return x.BankAcName
	}
	return ""
}

type ListInvsFundRegData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	InvsFundRegData []*InvsFundRegData `protobuf:"bytes,1,rep,name=InvsFundRegData,proto3" json:"InvsFundRegData,omitempty"`
}

func (x *ListInvsFundRegData) Reset() {
	*x = ListInvsFundRegData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getdata_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListInvsFundRegData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListInvsFundRegData) ProtoMessage() {}

func (x *ListInvsFundRegData) ProtoReflect() protoreflect.Message {
	mi := &file_getdata_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListInvsFundRegData.ProtoReflect.Descriptor instead.
func (*ListInvsFundRegData) Descriptor() ([]byte, []int) {
	return file_getdata_proto_rawDescGZIP(), []int{2}
}

func (x *ListInvsFundRegData) GetInvsFundRegData() []*InvsFundRegData {
	if x != nil {
		return x.InvsFundRegData
	}
	return nil
}

type ListRedmPayData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RedmPayRegData []*RedmPayRegData `protobuf:"bytes,1,rep,name=RedmPayRegData,proto3" json:"RedmPayRegData,omitempty"`
}

func (x *ListRedmPayData) Reset() {
	*x = ListRedmPayData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_getdata_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ListRedmPayData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ListRedmPayData) ProtoMessage() {}

func (x *ListRedmPayData) ProtoReflect() protoreflect.Message {
	mi := &file_getdata_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ListRedmPayData.ProtoReflect.Descriptor instead.
func (*ListRedmPayData) Descriptor() ([]byte, []int) {
	return file_getdata_proto_rawDescGZIP(), []int{3}
}

func (x *ListRedmPayData) GetRedmPayRegData() []*RedmPayRegData {
	if x != nil {
		return x.RedmPayRegData
	}
	return nil
}

var File_getdata_proto protoreflect.FileDescriptor

var file_getdata_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x67, 0x65, 0x74, 0x64, 0x61, 0x74, 0x61, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x1a,
	0x1b, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2f, 0x65, 0x6d, 0x70, 0x74, 0x79, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x7c, 0x0a, 0x0f,
	0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x17, 0x0a, 0x07, 0x73, 0x61, 0x5f, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x06, 0x73, 0x61, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x10, 0x0a, 0x03, 0x53, 0x49, 0x44, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x03, 0x53, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x6e,
	0x76, 0x73, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x49, 0x6e, 0x76, 0x73, 0x74, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x6c,
	0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x43, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x22, 0x9c, 0x02, 0x0a, 0x0e, 0x52,
	0x65, 0x64, 0x6d, 0x50, 0x61, 0x79, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1e, 0x0a,
	0x0a, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x43, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0a, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x41, 0x43, 0x12, 0x1c, 0x0a,
	0x09, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69, 0x63, 0x43, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x09, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69, 0x63, 0x43, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x42,
	0x61, 0x6e, 0x6b, 0x42, 0x69, 0x4d, 0x65, 0x6d, 0x43, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0b, 0x42, 0x61, 0x6e, 0x6b, 0x42, 0x69, 0x4d, 0x65, 0x6d, 0x43, 0x64, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x42, 0x61, 0x6e,
	0x6b, 0x43, 0x6e, 0x74, 0x72, 0x79, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x42, 0x61,
	0x6e, 0x6b, 0x43, 0x6e, 0x74, 0x72, 0x79, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e, 0x6b, 0x42,
	0x72, 0x61, 0x6e, 0x63, 0x68, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x42, 0x72, 0x61, 0x6e, 0x63, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x41, 0x63, 0x43, 0x63, 0x79,
	0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x41, 0x63, 0x43, 0x63, 0x79, 0x12, 0x1a, 0x0a,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x4e, 0x6f, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x08, 0x42, 0x61, 0x6e, 0x6b, 0x41, 0x63, 0x4e, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x61, 0x6e,
	0x6b, 0x41, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42,
	0x61, 0x6e, 0x6b, 0x41, 0x63, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x51, 0x0a, 0x13, 0x4c, 0x69, 0x73,
	0x74, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x3a, 0x0a, 0x0f, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x10, 0x2e, 0x49, 0x6e, 0x76, 0x73,
	0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0f, 0x49, 0x6e, 0x76,
	0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x22, 0x4a, 0x0a, 0x0f,
	0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x61, 0x74, 0x61, 0x12,
	0x37, 0x0a, 0x0e, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61, 0x79, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74,
	0x61, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x0f, 0x2e, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x52, 0x0e, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61,
	0x79, 0x52, 0x65, 0x67, 0x44, 0x61, 0x74, 0x61, 0x32, 0x90, 0x01, 0x0a, 0x0d, 0x49, 0x66, 0x75,
	0x61, 0x52, 0x65, 0x67, 0x54, 0x6f, 0x4b, 0x53, 0x45, 0x49, 0x12, 0x41, 0x0a, 0x0f, 0x53, 0x65,
	0x6e, 0x64, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x12, 0x14, 0x2e,
	0x4c, 0x69, 0x73, 0x74, 0x49, 0x6e, 0x76, 0x73, 0x46, 0x75, 0x6e, 0x64, 0x52, 0x65, 0x67, 0x44,
	0x61, 0x74, 0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x12, 0x3c, 0x0a,
	0x0e, 0x53, 0x65, 0x6e, 0x64, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61, 0x79, 0x52, 0x65, 0x67, 0x12,
	0x10, 0x2e, 0x4c, 0x69, 0x73, 0x74, 0x52, 0x65, 0x64, 0x6d, 0x50, 0x61, 0x79, 0x44, 0x61, 0x74,
	0x61, 0x1a, 0x16, 0x2e, 0x67, 0x6f, 0x6f, 0x67, 0x6c, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x45, 0x6d, 0x70, 0x74, 0x79, 0x28, 0x01, 0x42, 0x06, 0x5a, 0x04, 0x2e,
	0x3b, 0x76, 0x31, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_getdata_proto_rawDescOnce sync.Once
	file_getdata_proto_rawDescData = file_getdata_proto_rawDesc
)

func file_getdata_proto_rawDescGZIP() []byte {
	file_getdata_proto_rawDescOnce.Do(func() {
		file_getdata_proto_rawDescData = protoimpl.X.CompressGZIP(file_getdata_proto_rawDescData)
	})
	return file_getdata_proto_rawDescData
}

var file_getdata_proto_msgTypes = make([]protoimpl.MessageInfo, 4)
var file_getdata_proto_goTypes = []interface{}{
	(*InvsFundRegData)(nil),     // 0: InvsFundRegData
	(*RedmPayRegData)(nil),      // 1: RedmPayRegData
	(*ListInvsFundRegData)(nil), // 2: ListInvsFundRegData
	(*ListRedmPayData)(nil),     // 3: ListRedmPayData
	(*empty.Empty)(nil),         // 4: google.protobuf.Empty
}
var file_getdata_proto_depIdxs = []int32{
	0, // 0: ListInvsFundRegData.InvsFundRegData:type_name -> InvsFundRegData
	1, // 1: ListRedmPayData.RedmPayRegData:type_name -> RedmPayRegData
	2, // 2: IfuaRegToKSEI.SendInvsFundReg:input_type -> ListInvsFundRegData
	3, // 3: IfuaRegToKSEI.SendRedmPayReg:input_type -> ListRedmPayData
	4, // 4: IfuaRegToKSEI.SendInvsFundReg:output_type -> google.protobuf.Empty
	4, // 5: IfuaRegToKSEI.SendRedmPayReg:output_type -> google.protobuf.Empty
	4, // [4:6] is the sub-list for method output_type
	2, // [2:4] is the sub-list for method input_type
	2, // [2:2] is the sub-list for extension type_name
	2, // [2:2] is the sub-list for extension extendee
	0, // [0:2] is the sub-list for field type_name
}

func init() { file_getdata_proto_init() }
func file_getdata_proto_init() {
	if File_getdata_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_getdata_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*InvsFundRegData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_getdata_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RedmPayRegData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_getdata_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListInvsFundRegData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_getdata_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ListRedmPayData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_getdata_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   4,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_getdata_proto_goTypes,
		DependencyIndexes: file_getdata_proto_depIdxs,
		MessageInfos:      file_getdata_proto_msgTypes,
	}.Build()
	File_getdata_proto = out.File
	file_getdata_proto_rawDesc = nil
	file_getdata_proto_goTypes = nil
	file_getdata_proto_depIdxs = nil
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConnInterface

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion6

// IfuaRegToKSEIClient is the client API for IfuaRegToKSEI service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type IfuaRegToKSEIClient interface {
	SendInvsFundReg(ctx context.Context, opts ...grpc.CallOption) (IfuaRegToKSEI_SendInvsFundRegClient, error)
	SendRedmPayReg(ctx context.Context, opts ...grpc.CallOption) (IfuaRegToKSEI_SendRedmPayRegClient, error)
}

type ifuaRegToKSEIClient struct {
	cc grpc.ClientConnInterface
}

func NewIfuaRegToKSEIClient(cc grpc.ClientConnInterface) IfuaRegToKSEIClient {
	return &ifuaRegToKSEIClient{cc}
}

func (c *ifuaRegToKSEIClient) SendInvsFundReg(ctx context.Context, opts ...grpc.CallOption) (IfuaRegToKSEI_SendInvsFundRegClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IfuaRegToKSEI_serviceDesc.Streams[0], "/IfuaRegToKSEI/SendInvsFundReg", opts...)
	if err != nil {
		return nil, err
	}
	x := &ifuaRegToKSEISendInvsFundRegClient{stream}
	return x, nil
}

type IfuaRegToKSEI_SendInvsFundRegClient interface {
	Send(*ListInvsFundRegData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type ifuaRegToKSEISendInvsFundRegClient struct {
	grpc.ClientStream
}

func (x *ifuaRegToKSEISendInvsFundRegClient) Send(m *ListInvsFundRegData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ifuaRegToKSEISendInvsFundRegClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *ifuaRegToKSEIClient) SendRedmPayReg(ctx context.Context, opts ...grpc.CallOption) (IfuaRegToKSEI_SendRedmPayRegClient, error) {
	stream, err := c.cc.NewStream(ctx, &_IfuaRegToKSEI_serviceDesc.Streams[1], "/IfuaRegToKSEI/SendRedmPayReg", opts...)
	if err != nil {
		return nil, err
	}
	x := &ifuaRegToKSEISendRedmPayRegClient{stream}
	return x, nil
}

type IfuaRegToKSEI_SendRedmPayRegClient interface {
	Send(*ListRedmPayData) error
	CloseAndRecv() (*empty.Empty, error)
	grpc.ClientStream
}

type ifuaRegToKSEISendRedmPayRegClient struct {
	grpc.ClientStream
}

func (x *ifuaRegToKSEISendRedmPayRegClient) Send(m *ListRedmPayData) error {
	return x.ClientStream.SendMsg(m)
}

func (x *ifuaRegToKSEISendRedmPayRegClient) CloseAndRecv() (*empty.Empty, error) {
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	m := new(empty.Empty)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// IfuaRegToKSEIServer is the server API for IfuaRegToKSEI service.
type IfuaRegToKSEIServer interface {
	SendInvsFundReg(IfuaRegToKSEI_SendInvsFundRegServer) error
	SendRedmPayReg(IfuaRegToKSEI_SendRedmPayRegServer) error
}

// UnimplementedIfuaRegToKSEIServer can be embedded to have forward compatible implementations.
type UnimplementedIfuaRegToKSEIServer struct {
}

func (*UnimplementedIfuaRegToKSEIServer) SendInvsFundReg(IfuaRegToKSEI_SendInvsFundRegServer) error {
	return status.Errorf(codes.Unimplemented, "method SendInvsFundReg not implemented")
}
func (*UnimplementedIfuaRegToKSEIServer) SendRedmPayReg(IfuaRegToKSEI_SendRedmPayRegServer) error {
	return status.Errorf(codes.Unimplemented, "method SendRedmPayReg not implemented")
}

func RegisterIfuaRegToKSEIServer(s *grpc.Server, srv IfuaRegToKSEIServer) {
	s.RegisterService(&_IfuaRegToKSEI_serviceDesc, srv)
}

func _IfuaRegToKSEI_SendInvsFundReg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IfuaRegToKSEIServer).SendInvsFundReg(&ifuaRegToKSEISendInvsFundRegServer{stream})
}

type IfuaRegToKSEI_SendInvsFundRegServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ListInvsFundRegData, error)
	grpc.ServerStream
}

type ifuaRegToKSEISendInvsFundRegServer struct {
	grpc.ServerStream
}

func (x *ifuaRegToKSEISendInvsFundRegServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ifuaRegToKSEISendInvsFundRegServer) Recv() (*ListInvsFundRegData, error) {
	m := new(ListInvsFundRegData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func _IfuaRegToKSEI_SendRedmPayReg_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(IfuaRegToKSEIServer).SendRedmPayReg(&ifuaRegToKSEISendRedmPayRegServer{stream})
}

type IfuaRegToKSEI_SendRedmPayRegServer interface {
	SendAndClose(*empty.Empty) error
	Recv() (*ListRedmPayData, error)
	grpc.ServerStream
}

type ifuaRegToKSEISendRedmPayRegServer struct {
	grpc.ServerStream
}

func (x *ifuaRegToKSEISendRedmPayRegServer) SendAndClose(m *empty.Empty) error {
	return x.ServerStream.SendMsg(m)
}

func (x *ifuaRegToKSEISendRedmPayRegServer) Recv() (*ListRedmPayData, error) {
	m := new(ListRedmPayData)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

var _IfuaRegToKSEI_serviceDesc = grpc.ServiceDesc{
	ServiceName: "IfuaRegToKSEI",
	HandlerType: (*IfuaRegToKSEIServer)(nil),
	Methods:     []grpc.MethodDesc{},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "SendInvsFundReg",
			Handler:       _IfuaRegToKSEI_SendInvsFundReg_Handler,
			ClientStreams: true,
		},
		{
			StreamName:    "SendRedmPayReg",
			Handler:       _IfuaRegToKSEI_SendRedmPayReg_Handler,
			ClientStreams: true,
		},
	},
	Metadata: "getdata.proto",
}
